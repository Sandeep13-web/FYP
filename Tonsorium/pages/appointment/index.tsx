import { Avatar, Button, Col, DatePicker, DatePickerProps, Form, Image, Row, Select, TimePicker } from 'antd'
import type { SelectProps } from 'antd';
import 'react-toastify/dist/ReactToastify.css';
import { UserOutlined } from '@ant-design/icons';
import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import { booking } from "../../ImageConfig"
import moment, { Moment } from 'moment';
import Confirmation from '../confirmation';
import Recurring from '../recurringAppointment';
import { getSession, useSession } from 'next-auth/react';
import axios from 'axios';
import { toast, ToastContainer } from 'react-toastify';
import { useAppDispatch, useAppSelector } from '../../store/reduxHooks';
import { getStaff } from '../../store/actions/StaffActionCreator';
import { getService } from '../../store/actions/ServiceActionCreator';


function Appointment() {
    const dispatch = useAppDispatch()
    const { data: session, status } = useSession()
    let user = session?.user?.name;
    let userSplit = user?.split(' ')
    const { Option } = Select;

    // const [serviceData, setServiceData] = useState<any>([])
    const [selectedServices, setSelectedServices] = useState<any>()

    // const [staffData, setStaffData] = useState<any>([])
    const [selectedStaff, setSelectedStaff] = useState<any>()
    const [selectedStaffDetails, setSelectedStaffDetails] = useState<any>({})

    const [selectedDate, setSelectedDate] = useState<any>()
    const [selectDay, setSelectDay] = useState('')
    const [checkAvailability, setCheckAvailability] = useState<Boolean>()

    const [selectedTimeStore, setSelectedTimeStore] = useState()

    const [isContinueClicked, setIsContinueClicked] = useState<Boolean>(false)
    const [isRecurringClicked, setIsRecurringClicked] = useState<Boolean>(false)

    const {staffData, staffLoading} = useAppSelector((state:any) => state.staffReducer)
    const {serviceData , serviceLoading} =useAppSelector((state:any) => state.serviceReducer)

    useEffect(() => {
        dispatch(getStaff({}))
        dispatch(getService({}))
    }, [])
    
    

    const options: SelectProps['options'] = [];
    {
        serviceData && serviceData?.map((items: any) => (
            options.push({
                label: `${items.serviceName}`,
                value: items.id,
            })
        ))
    }
    const handleChange = (key: [] , option: any) => {
        setSelectedServices(option)
    };


    const config = {
        rules: [{ type: 'object' as const, message: 'Please select time!' }],
    };

    const disabledDate = (current:any) => {
        const todayDate = moment().format('YYYY-MM-DD')
        return current && current < moment(todayDate, "YYYY-MM-DD");
    }
    const selectedDay: DatePickerProps['onChange'] = (date, dateString) => {
        const selectDate = moment(date).format('YYYY-MM-DD')
        setSelectedDate(selectDate)

        const changedDay = moment(selectDate).format('dddd')
        setSelectDay(changedDay);

        const isAvailable = selectedStaffDetails?.availableDays.includes(changedDay.toLowerCase())
        setCheckAvailability(isAvailable)
    };
    


    const selectedTime = (time: Moment | null, timeString: string) => {
        const timeData: any = moment(time).format('hh:mm A')
        setSelectedTimeStore(timeData)
    }
    
    
    const handleStaff = (value: number) => {
        setSelectedStaff(value)
        handleStaffDetails(value)
    }
    
    const handleStaffDetails = (value: any) => {
        setSelectedStaffDetails(staffData.filter((item:any) => (item._id == value))[0])
    }
    
    //Submitting booking
    const confirm = () => {
        
        if(selectedServices == undefined || selectedStaff==undefined || selectedTimeStore==undefined || selectedDate==undefined ){
            toast.warn("Please select all the required fields!")
        }else{
            setIsContinueClicked(true)
        }
    }
    return (
        <>
        <ToastContainer />
            <Head>
                <title>Tonsorium | Appointment</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="./title-icon.png" />
                <script src="https://smtpjs.com/v3/smtp.js" async></script>
            </Head>

            <section className="inner-page-banner about-banner booking-banner"> </section>

            <section className='description-section booking'>
                <div className="container">
                    <h3 className="page-heading">Book An Appointment</h3>

                    <div className="welcome">
                        <h5>Welcome! <strong>{user}</strong></h5>
                    </div>
                    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>
                        <Col className="gutter-row flex-grow" xl={12}>
                            {
                                !isContinueClicked && !isRecurringClicked &&
                                <Form action="" layout='vertical'>
                                    <div>
                                        <h4 className='book-heading'><span>Service</span></h4>
                                        <Form.Item label="Select Services">
                                            <Select
                                                mode="multiple"
                                                showArrow
                                                allowClear
                                                onChange={(key, option) => handleChange(key , option) }
                                                style={{ width: '100%' }}
                                                options={options}
                                                className="booking-select"
                                                value={selectedServices}
                                            />
                                        </Form.Item>
                                        <Form.Item label="Select Staff">
                                            <Select placeholder="Select a staff" onChange={handleStaff} value={selectedStaffDetails?.staffName}>
                                                {
                                                    staffData?.map((item: any) => (
                                                        <Option key={item._id} value={item._id}>{item.staffName}</Option>
                                                    ))
                                                }
                                            </Select>
                                            {
                                                selectedStaffDetails ?
                                                    selectedStaffDetails && selectedStaffDetails.image ?
                                                    <Image src={selectedStaffDetails.image} className='book-staff-img' preview={false} alt="Card Image"></Image>
                                                
                                                    :  <Avatar icon={<UserOutlined />} className="book-staff-img" size={100}/>
                                                    :
                                                    <span></span>
                                            }
                                        </Form.Item>
                                    </div>
                                    <div>
                                        <h5 className='book-heading'><span>Date and Time</span></h5>
                                        <Form.Item  {...config} label="Select Appointment Date">
                                            {/* <DatePicker name="date-picker" format={customWeekStartEndFormat} onChange={selectedWeek} /> */}
                                            <DatePicker name="date-picker" disabledDate={disabledDate} format={'YYYY-MM-DD'} onChange={selectedDay} placement={'topLeft'} value={selectedDate ? moment(selectedDate) : null} />
                                            {

                                                checkAvailability == true && <span className='display-text success'>The staff is available!</span>
                                            }
                                            {

                                                checkAvailability == false && <span className='display-text danger'>The staff is unavailable. Please select Another Date.</span>
                                            }
                                        </Form.Item>
                                        <Form.Item label="Select Time">
                                            <TimePicker format={'HH:mm'} use12Hours minuteStep={30} disabledHours={()=> [1,2,3,4,5,6,7,8,9, 21,22,23,24]} onChange={selectedTime} placement={'topLeft'} value={selectedTimeStore ? moment(`${moment().format('YYYY-MM-DD')} ${selectedTimeStore}`) : undefined} />
                                        </Form.Item>
                                    </div>
                                    <Button className='btn-primary' onClick={confirm} htmlType="submit">Continue</Button>
                                </Form>
                            }
                            {
                                isContinueClicked && !isRecurringClicked &&
                                <Confirmation selectedServices={selectedServices} selectedStaffDetails={selectedStaffDetails} selectDay={selectDay} selectedTimeStore={selectedTimeStore} setIsContinueClicked={setIsContinueClicked} setIsRecurringClicked={setIsRecurringClicked} selectedDate={selectedDate} />
                            }
                            {
                                isRecurringClicked && 
                                <Recurring selectedServices={selectedServices} selectedStaffDetails={selectedStaffDetails} selectDay={selectDay} selectedTimeStore={selectedTimeStore} setIsContinueClicked={setIsContinueClicked} setIsRecurringClicked={setIsRecurringClicked} selectedDate={selectedDate} disabledDate={disabledDate} />
                            }
                        </Col>
                        <Col className='gutter-row image' xl={12}>
                            <Image src={booking.booking} className='book-img' preview={false} alt="Card Image" />
                        </Col>
                    </Row>
                </div>
            </section>
        </>
    )
}

export default Appointment

export const getServerSideProps = async (context: any) => {
    const session = await getSession(context)
    if (!session) {
        return {
            redirect: {
                destination: '/'
            }
        }
    }
    return {
        props: { session }
    }
}